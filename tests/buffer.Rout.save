
R Under development (unstable) (2022-03-15 r81904) -- "Unsuffered Consequences"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # 0. Create context
> library(OpenCL)
> ctx<-oclContext()
> 
> # 1. Create single-precision buffer and fill with values
> buf <- clBuffer(ctx, 16, "single")
> buf[] <- 1:16
> 
> #    Inspect the resulting buffer
> class(buf)
[1] "clBuffer"
> print(attributes(buf)$mode)
[1] "single"
> print(buf)
OpenCL buffer, 16 elements of type single 
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16
> length(buf)
[1] 16
> 
> #    subsetting
> buf[2:5]       # contiguous
[1] 2 3 4 5
> buf[c(1,6)]    # non-contiguous
[1] 1 6
> buf[-1]        # negative
 [1]  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16
> buf[buf[] > 6] # logical
 [1]  7  8  9 10 11 12 13 14 15 16
> buf[c(NA, 4)]  # NA
[1] NA  4
> 
> #    subassignment
> buf[2:3] = 0 # contiguous
> buf[1:5]
[1] 1 0 0 4 5
> sum(buf[1:4])
[1] 5
> buf[5:4] = c(1,2) # non-contiguous (reversed)
> buf[1:5]
[1] 1 0 0 2 1
> 
> #    Check if memory accounting works.
> oclMemLimits()$used
[1] 64
> rm(buf)
> invisible(gc())
> oclMemLimits()$used
[1] 0
> 
> # 2. The same for an integer buffer
> ints <- clBuffer(ctx, 32, "integer")
> ints[] <- 16:47
> 
> #    Inspect the resulting buffer
> class(ints)
[1] "clBuffer"
> print(attributes(ints)$mode)
[1] "integer"
> print(ints)
OpenCL buffer, 32 elements of type integer 
 [1] 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40
[26] 41 42 43 44 45 46 47
> length(ints)
[1] 32
> 
> # 3. Let's see if we can guess the type correctly
> numeric.buf <- as.clBuffer(sqrt(3:18), ctx)
> print(numeric.buf)
OpenCL buffer, 16 elements of type double 
 [1] 1.732051 2.000000 2.236068 2.449490 2.645751 2.828427 3.000000 3.162278
 [9] 3.316625 3.464102 3.605551 3.741657 3.872983 4.000000 4.123106 4.242641
> integer.buf <- as.clBuffer(-1:14, ctx)
> print(integer.buf)
OpenCL buffer, 16 elements of type integer 
 [1] -1  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14
> 
> # 4. Other functions
> c(is.clBuffer(ints), is.clBuffer(1:16), is.clBuffer(ctx))
[1]  TRUE FALSE FALSE
> 
> proc.time()
   user  system elapsed 
  0.149   0.044   0.224 
